        -:    0:Source:C:/Users/Deea/Desktop/DOCUMENTS/UNI/First year/Semester 2/OOP/Labs/lab_9/domain/Subject.cpp
        -:    0:Graph:C:\Users\Deea\Desktop\DOCUMENTS\UNI\First year\Semester 2\OOP\Labs\lab_9\cmake-build-debug-coverage\CMakeFiles\lab_9.dir\domain\Subject.cpp.gcno
        -:    0:Data:C:\Users\Deea\Desktop\DOCUMENTS\UNI\First year\Semester 2\OOP\Labs\lab_9\cmake-build-debug-coverage\CMakeFiles\lab_9.dir\domain\Subject.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Deea on 3/31/2023.
        -:    3://
        -:    4:
        -:    5:#include "Subject.h"
        -:    6:#include <iostream>
        -:    7:#include <vector>
        -:    8://#include <fstream>
        -:    9:#include <sstream>
        -:   10:
        -:   11:/**DEFAULT CONSTRUCTOR*/
function _ZN7SubjectC2Ev called 11 returned 100% blocks executed 62%
       11:   12:Subject::Subject() {
       11:   12-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
       11:   13:    this->name = "";
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   14:    this->hours = -1;
       11:   15:    this->type = "";
       11:   15-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:   16:    this->teacher = "";
       11:   16-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
        -:   17://    std::cout << "default creating subject" << std::endl;
       11:   18:}
       11:   18-block  0
    $$$$$:   18-block  1
call    0 never executed
    $$$$$:   18-block  2
call    1 never executed
    $$$$$:   18-block  3
call    2 never executed
        -:   19:
        -:   20:
        -:   21:/**CONSTRUCTOR OF SUBJECT*/
function _ZN7SubjectC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiS7_S7_ called 38 returned 100% blocks executed 62%
       38:   22:Subject::Subject(const std::string &n, int h, const std::string &t, const std::string &te) {
       38:   22-block  0
call    0 returned 38
call    1 returned 38
call    2 returned 38
        -:   23://    std::cout << "constructing subject with params" << std::endl;
       38:   24:    this->name = n;
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:   25:    this->hours = h;
       38:   26:    this->type = t;
       38:   26-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:   27:    this->teacher = te;
       38:   27-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
        -:   28:
       38:   29:}
       38:   29-block  0
    $$$$$:   29-block  1
call    0 never executed
    $$$$$:   29-block  2
call    1 never executed
    $$$$$:   29-block  3
call    2 never executed
        -:   30:
        -:   31:/**DESTRUCTOR*/
function _ZN7SubjectD2Ev called 139 returned 100% blocks executed 100%
      139:   32:Subject::~Subject() = default;
      139:   32-block  0
call    0 returned 139
call    1 returned 139
call    2 returned 139
        -:   33:
        -:   34:/**COPY CONSTRUCTOR*/
function _ZN7SubjectC2ERKS_ called 90 returned 100% blocks executed 62%
       90:   35:Subject::Subject(const Subject &subject) {
       90:   35-block  0
call    0 returned 90
call    1 returned 90
call    2 returned 90
       90:   36:    this->name = subject.name;
call    0 returned 90
branch  1 taken 90 (fallthrough)
branch  2 taken 0 (throw)
       90:   37:    this->hours = subject.hours;
       90:   38:    this->type = subject.type;
       90:   38-block  0
call    0 returned 90
branch  1 taken 90 (fallthrough)
branch  2 taken 0 (throw)
       90:   39:    this->teacher = subject.teacher;
       90:   39-block  0
call    0 returned 90
branch  1 taken 90 (fallthrough)
branch  2 taken 0 (throw)
        -:   40://    std::cout << "copy constructing subject" << std::endl;
       90:   41:}
       90:   41-block  0
    $$$$$:   41-block  1
call    0 never executed
    $$$$$:   41-block  2
call    1 never executed
    $$$$$:   41-block  3
call    2 never executed
        -:   42:
        -:   43:/**
        -:   44: * GETTERS
        -:   45: *
        -:   46: */
function _ZNK7Subject9get_hoursEv called 88 returned 100% blocks executed 100%
       88:   47:int Subject::get_hours() const {
       88:   48:    return this->hours;
       88:   48-block  0
        -:   49:}
        -:   50:
function _ZNK7Subject8get_nameB5cxx11Ev called 225 returned 100% blocks executed 100%
      225:   51:const string &Subject::get_name() const {
      225:   52:    return this->name;
      225:   52-block  0
        -:   53:}
        -:   54:
function _ZNK7Subject8get_typeB5cxx11Ev called 113 returned 100% blocks executed 100%
      113:   55:const string &Subject::get_type() const {
      113:   56:    return this->type;
      113:   56-block  0
        -:   57:}
        -:   58:
function _ZNK7Subject11get_teacherB5cxx11Ev called 216 returned 100% blocks executed 100%
      216:   59:const string &Subject::get_teacher() const {
      216:   60:    return this->teacher;
      216:   60-block  0
        -:   61:}
        -:   62:
        -:   63:/**SETTERS*/
        -:   64:
function _ZN7Subject9set_hoursEi called 7 returned 100% blocks executed 100%
        7:   65:[[maybe_unused]] void Subject::set_hours(int new_hours) {
        7:   66:    this->hours = new_hours;
        7:   67:}
        -:   68:
function _ZN7Subject8set_typeERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 100%
        7:   69:[[maybe_unused]] void Subject::set_type(const std::string &new_type) {
        7:   70:    this->type = new_type;
        7:   70-block  0
call    0 returned 7
        7:   71:}
        -:   72:
        -:   73:/**TO STRING*/
function _ZNK7Subject15to_string_printB5cxx11Ev called 1 returned 100% blocks executed 49%
        1:   74:string Subject::to_string_print() const {
        2:   75:    return "\tSubject " + this->name + "\n\tHours: " + std::to_string(this->hours) + "\n\tType: " + this->type +
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   75-block  0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   75-block  1
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   75-block  2
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   75-block  3
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
        1:   75-block  4
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:   75-block  5
call   18 returned 1
call   19 returned 1
call   20 returned 1
call   21 returned 1
call   22 returned 1
call   23 returned 1
call   24 returned 1
    $$$$$:   75-block  6
call   25 never executed
    $$$$$:   75-block  7
    $$$$$:   75-block  8
call   26 never executed
    $$$$$:   75-block  9
    $$$$$:   75-block 10
call   27 never executed
    $$$$$:   75-block 11
    $$$$$:   75-block 12
call   28 never executed
    $$$$$:   75-block 13
    $$$$$:   75-block 14
call   29 never executed
    $$$$$:   75-block 15
    $$$$$:   75-block 16
call   30 never executed
    $$$$$:   75-block 17
    $$$$$:   75-block 18
call   31 never executed
        3:   76:           "\n\tTeacher: " + this->teacher;
        1:   76-block  0
call    0 returned 1
        1:   76-block  1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   76-block  2
        -:   77:}
        -:   78:
        -:   79:/**OPERATORS*/
        -:   80:
function _ZN7SubjectaSERKS_ called 12 returned 100% blocks executed 100%
       12:   81:Subject &Subject::operator=(const Subject &other) = default;
       12:   81-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
        -:   82:
function _ZN7SubjecteqERKS_ called 17 returned 100% blocks executed 88%
       17:   83:bool Subject::operator==(const Subject &other) {
      17*:   84:    return this->name == other.name && this->teacher == other.teacher;
       17:   84-block  0
call    0 returned 17
branch  1 taken 17 (fallthrough)
branch  2 taken 0
       17:   84-block  1
call    3 returned 17
branch  4 taken 17 (fallthrough)
branch  5 taken 0
       17:   84-block  2
    %%%%%:   84-block  3
       17:   84-block  4
        -:   85:}
        -:   86:
        -:   87:/**COMPARATORS*/
        -:   88:
function _Z7cmpNameRK7SubjectS1_ called 3 returned 100% blocks executed 100%
        3:   89:bool cmpName(const Subject &sbj_1, const Subject &sbj_2) {
        3:   90:    if (sbj_1.get_name() < sbj_2.get_name())
        3:   90-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   91:        return true;
        2:   91-block  0
        -:   92:    else
        1:   93:        return false;
        1:   93-block  0
        -:   94:}
        -:   95:
function _Z8cmpHoursRK7SubjectS1_ called 3 returned 100% blocks executed 100%
        3:   96:bool cmpHours(const Subject &sbj_1, const Subject &sbj_2) {
        3:   97:    if (sbj_1.get_hours() < sbj_2.get_hours())
        3:   97-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 2 (fallthrough)
branch  3 taken 1
        2:   98:        return true;
        2:   98-block  0
        -:   99:    else
        1:  100:        return false;
        1:  100-block  0
        -:  101:}
        -:  102:
function _Z10cmpTeacherRK7SubjectS1_ called 2 returned 100% blocks executed 100%
        2:  103:bool cmpTeacher(const Subject &sbj_1, const Subject &sbj_2) {
        2:  104:    if (sbj_1.get_teacher() < sbj_2.get_teacher())
        2:  104-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:  105:        return true;
        1:  105-block  0
        -:  106:    else
        1:  107:        return false;
        1:  107-block  0
        -:  108:}
        -:  109:
function _Z7cmpTypeRK7SubjectS1_ called 2 returned 100% blocks executed 100%
        2:  110:bool cmpType(const Subject &sbj_1, const Subject &sbj_2) {
        2:  111:    if (sbj_1.get_type() < sbj_2.get_type())
        2:  111-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        1:  112:        return true;
        1:  112-block  0
        -:  113:    else
        1:  114:        return false;
        1:  114-block  0
        -:  115:}
        -:  116:
function _Z17cmpTeacherandTypeRK7SubjectS1_ called 11 returned 100% blocks executed 100%
       11:  117:bool cmpTeacherandType(const Subject &sbj_1, const Subject &sbj_2) {
       11:  118:    if (sbj_1.get_teacher()>sbj_2.get_teacher())
       11:  118-block  0
call    0 returned 11
call    1 returned 11
call    2 returned 11
branch  3 taken 2 (fallthrough)
branch  4 taken 9
        2:  119:        return false;
        2:  119-block  0
        9:  120:    if (sbj_1.get_teacher()<sbj_2.get_teacher())
        9:  120-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
branch  3 taken 3 (fallthrough)
branch  4 taken 6
        3:  121:        return true;
        3:  121-block  0
        6:  122:    if (sbj_1.get_teacher() == sbj_2.get_teacher()) {
        6:  122-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 6 (fallthrough)
branch  4 taken 0
        6:  123:        if (sbj_1.get_type() < sbj_2.get_type())
        6:  123-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        3:  124:            return true;
        3:  124-block  0
        3:  125:        else if (sbj_1.get_type() > sbj_2.get_type())
        3:  125-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 1 (fallthrough)
branch  4 taken 2
        1:  126:            return false;
        1:  126-block  0
        -:  127:    }
        2:  128:    return false;
        2:  128-block  0
        -:  129:}
function _ZN7Subject11set_teacherERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 100%
        7:  130:void Subject::set_teacher(const std::string &nteacher) {
        7:  131:    this->teacher=nteacher;
        7:  131-block  0
call    0 returned 7
        7:  132:}
function _ZN7Subject8set_nameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 100%
        7:  133:void Subject::set_name(const std::string &nname) {
        7:  134:    this->name=nname;
        7:  134-block  0
call    0 returned 7
        7:  135:}
        -:  136:
        -:  137:
function _Z10splitInputRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEc called 14 returned 100% blocks executed 71%
       14:  138:std::vector<string> splitInput(const string& inputString, char delimitator)
        -:  139:{
       14:  140:    std::vector<string> splited;
       14:  140-block  0
call    0 returned 14
       14:  141:    std:: stringstream stream(inputString);
call    0 returned 14
call    1 returned 14
branch  2 taken 14 (fallthrough)
branch  3 taken 0 (throw)
       14:  142:    std::string curent;
       14:  142-block  0
call    0 returned 14
       38:  143:    while(std::getline(stream,curent,delimitator))
       38:  143-block  0
call    0 returned 38
branch  1 taken 38 (fallthrough)
branch  2 taken 0 (throw)
       38:  143-block  1
call    3 returned 38
branch  4 taken 38 (fallthrough)
branch  5 taken 0 (throw)
       38:  143-block  2
branch  6 taken 24
branch  7 taken 14 (fallthrough)
        -:  144:    {
       24:  145:        splited.push_back(curent);
       24:  145-block  0
call    0 returned 24
branch  1 taken 24 (fallthrough)
branch  2 taken 0 (throw)
        -:  146:    }
       28:  147:    return splited;
       14:  147-block  0
       14:  147-block  1
       14:  148:}
       14:  148-block  0
call    0 returned 14
call    1 returned 14
    $$$$$:  148-block  1
call    2 never executed
    $$$$$:  148-block  2
call    3 never executed
    $$$$$:  148-block  3
call    4 never executed
function _ZrsRSiR7Subject called 14 returned 100% blocks executed 84%
       14:  149:std::istream  & operator>>(std::istream & inputStream, Subject & subject)
        -:  150:{
       14:  151:    std::string line;
       14:  151-block  0
call    0 returned 14
       14:  152:    std::getline(inputStream,line);
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14:  153:    std::vector<string> objects= splitInput(line,',');
       14:  153-block  0
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
       14:  154:    if(objects.size()!=4)
       14:  154-block  0
call    0 returned 14
branch  1 taken 8 (fallthrough)
branch  2 taken 6
        8:  155:        return inputStream;
        8:  155-block  0
        6:  156:    subject.set_name(objects[0]);
        6:  156-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  157:    subject.set_hours(std::stoi(objects[1]));
        6:  157-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  157-block  1
call    4 returned 6
        6:  158:    subject.set_type(objects[2]);
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  159:    subject.set_teacher(objects[3]);
        6:  159-block  0
call    0 returned 6
call    1 returned 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0 (throw)
        6:  160:    return inputStream;
        6:  160-block  0
       14:  161:}
       14:  161-block  0
call    0 returned 14
call    1 returned 14
    $$$$$:  161-block  1
call    2 never executed
    $$$$$:  161-block  2
call    3 never executed
        -:  162:
function _ZlsRSoRK7Subject called 52 returned 100% blocks executed 100%
       52:  163:std::ostream & operator<<(std::ostream & outputStream, const Subject& subject)
        -:  164:{
       52:  165:    outputStream << subject.get_name()<<  ","<<subject.get_hours()<< ","<<subject.get_type()<<","<<subject.get_teacher()<<std::endl;
       52:  165-block  0
call    0 returned 52
call    1 returned 52
call    2 returned 52
call    3 returned 52
call    4 returned 52
call    5 returned 52
call    6 returned 52
call    7 returned 52
call    8 returned 52
call    9 returned 52
call   10 returned 52
call   11 returned 52
       52:  166:    return outputStream;
        -:  167:}
