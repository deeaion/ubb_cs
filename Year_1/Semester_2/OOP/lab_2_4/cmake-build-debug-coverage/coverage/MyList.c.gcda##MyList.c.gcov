        -:    0:Source:C:/Users/Deea/Desktop/lab_2_4/my_list/MyList.c
        -:    0:Graph:C:\Users\Deea\Desktop\lab_2_4\cmake-build-debug-coverage\CMakeFiles\lab_2_4.dir\my_list\MyList.c.gcno
        -:    0:Data:C:\Users\Deea\Desktop\lab_2_4\cmake-build-debug-coverage\CMakeFiles\lab_2_4.dir\my_list\MyList.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by Deea on 3/11/2023.
        -:    3://
        -:    4:#include "../my_list/MyList.h"
function createList called 8 returned 100% blocks executed 100%
        8:    5:MyList* createList(int capacity)
        -:    6:{
        8:    7:    MyList* List=(MyList*)malloc(sizeof(MyList));
        8:    8:    List->capacity=capacity;
        8:    9:    List->size=0;
        8:   10:    List->elems=(GenericElement *)malloc(capacity*sizeof(GenericElement));
        8:   11:    return List;
        8:   11-block  0
        -:   12:}
function destroy called 11 returned 100% blocks executed 100%
       11:   13:int destroy(MyList* l)
        -:   14:{// daca lista este deja goala nu are rost sa dealoci=> dangling pointer
       11:   15:    if(l==NULL)
       11:   15-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 10
        1:   16:        return 1;
        1:   16-block  0
       36:   17:    for(int i=0;i<l->size;i++)
       10:   17-block  0
       36:   17-block  1
branch  0 taken 26
branch  1 taken 10 (fallthrough)
        -:   18:    {
       26:   19:        destroyElectronic(l->elems[i]);
       26:   19-block  0
call    0 returned 26
        -:   20:    }
       10:   21:    free(l->elems);
       10:   22:    free(l);
       10:   23:    return 0;
       10:   23-block  0
        -:   24:}
        -:   25:
function addToList called 20 returned 100% blocks executed 100%
       20:   26:void addToList(MyList* current_list, GenericElement  element_to_add)
        -:   27:{   //verifying if the size is equal to the capacity. If it is we need to resize the list
       20:   28:    if(current_list->size==current_list->capacity){
       20:   28-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 15
        5:   29:        resize(current_list);
        5:   29-block  0
call    0 returned 5
        -:   30:    }
        -:   31:    //else we just need to add it
       20:   32:    current_list->elems[current_list->size]= copyElectronic(element_to_add);
       20:   32-block  0
call    0 returned 20
       20:   33:    destroyElectronic(element_to_add);
call    0 returned 20
       20:   34:    current_list->size+=1;
       20:   35:}
function resize called 6 returned 100% blocks executed 100%
        6:   36:void resize(MyList* list)
        -:   37:{
        6:   38:    int newCapacity=list->capacity+10;
        6:   39:    GenericElement *newElements=(GenericElement*)malloc(sizeof(GenericElement)*newCapacity);
        -:   40:
       12:   41:    for(int i=0;i<list->size;i++)
        6:   41-block  0
       12:   41-block  1
branch  0 taken 6
branch  1 taken 6 (fallthrough)
        -:   42:    {
        6:   43:        newElements[i]=list->elems[i];
        6:   43-block  0
        -:   44:    }
        -:   45:    //dealocate new vector
        6:   46:    free(list->elems);
        6:   47:    list->elems=newElements;
        6:   48:    list->capacity=newCapacity;
        6:   49:}
function size called 1 returned 100% blocks executed 100%
        1:   50:int size(MyList* l)
        -:   51:{
        1:   52:    return l->size;
        1:   52-block  0
        -:   53:}
        -:   54:
function copyList called 3 returned 100% blocks executed 100%
        3:   55:MyList* copyList(MyList* l)
        3:   56:{   MyList * new_list=(MyList*)malloc(sizeof(MyList));
        3:   57:    new_list->capacity=l->capacity;
        3:   58:    new_list->size=l->size;
        3:   59:    new_list->elems=(GenericElement *)malloc(sizeof(GenericElement)*new_list->capacity);
       12:   60:    for (int i=0; i<l->size;i++)
        3:   60-block  0
       12:   60-block  1
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        -:   61:    {
        9:   62:        new_list->elems[i]= copyElectronic(l->elems[i]);
        9:   62-block  0
call    0 returned 9
        -:   63:        }
        -:   64:
        3:   65:    return new_list;
        3:   65-block  0
        -:   66:}
        -:   67:
