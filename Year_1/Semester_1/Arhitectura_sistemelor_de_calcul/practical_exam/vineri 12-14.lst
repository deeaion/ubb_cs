     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit  ,scanf,fscanf,fopen,fclose,printf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll 
     9                                  import scanf msvcrt.dll
    10                                  import fscanf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll; 
    13                                  import printf msvcrt.dll;exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 00<rept>                    fisier times 20 db 0
    19 00000014 00000000                    descriptor dd 0
    20 00000018 7200                        mod_acces db "r",0
    21 0000001A 00000000                    n dd 0
    22 0000001E 00000000                    c dd 0
    23 00000022 00000000                    dif dd 0
    24 00000026 256400                      format_d db "%d",0
    25 00000029 257300                      format_s db "%s",0
    26 0000002C 256300                      format_c db "%c",0
    27 0000002F 466973696572756C20-         mesaj_eroare db "Fisierul nu a fost gasit",0
    27 00000038 6E75206120666F7374-
    27 00000041 20676173697400     
    28                                  
    29                                  ; our code starts here
    30                                  segment code use32 class=code
    31                                      start:
    32                                      ;Se citeste de la tastatura un nume de fisier si un numar N (0<= N < 8). Programul va lua cel de-al N-ule bit din fiecare caracter(byte) din fisier si va face diferenta acestor biti. Programul va afisa diferenta
    33 00000000 68[00000000]                push dword fisier
    34 00000005 68[29000000]                push dword format_s
    35 0000000A FF15[00000000]              call [scanf]
    36 00000010 83C408                      add esp,4*2
    37 00000013 68[1A000000]                push dword n
    38 00000018 68[26000000]                push dword format_d
    39 0000001D FF15[00000000]              call [scanf]
    40 00000023 83C408                      add esp,4*2
    41                                      ;fopen(nume,mod_acces)
    42 00000026 68[18000000]                push dword mod_acces
    43 0000002B 68[00000000]                push dword fisier
    44 00000030 FF15[00000000]              call [fopen]
    45 00000036 83C408                      add esp,4*2
    46 00000039 83F800                      cmp eax,0
    47 0000003C 0F84C1000000                je eroare
    48 00000042 A3[14000000]                mov [descriptor],eax
    49                                      ;scanam primul numar
    50                                      ;fscanf(desc,format,var)
    51 00000047 68[1E000000]                push dword c
    52 0000004C 68[2C000000]                push dword format_c
    53 00000051 FF35[14000000]              push dword [descriptor]
    54 00000057 FF15[00000000]              call [fscanf]
    55 0000005D 83C40C                      add esp,4*3
    56 00000060 8B0D[1A000000]              mov ecx,[n]
    57 00000066 A0[1E000000]                mov al, byte [c]
    58                                      repeta_primul:
    59 0000006B 83F900                          cmp ecx,0
    60 0000006E 7404                            je bitul_prim
    61 00000070 D0E8                            shr al,1
    62 00000072 E2F7                            loop repeta_primul
    63                                      bitul_prim:
    64 00000074 D0E8                            shr al,1
    65 00000076 720C                            jc unu_prim
    66 00000078 C705[22000000]0000-             mov dword [dif],0
    66 00000080 0000               
    67 00000082 EB0A                            jmp terminat_primul
    68                                      unu_prim:
    69 00000084 C705[22000000]0100-             mov dword [dif],1
    69 0000008C 0000               
    70                                      terminat_primul:
    71 0000008E 83F8FF                      cmp eax,-1
    72 00000091 745A                            je gata
    73                                      repeta:
    74                                          
    75 00000093 68[1E000000]                    push dword c
    76 00000098 68[2C000000]                    push dword format_c
    77 0000009D FF35[14000000]                  push dword [descriptor]
    78 000000A3 FF15[00000000]                  call [fscanf]
    79 000000A9 83C40C                          add esp,4*3
    80 000000AC 83F8FF                          cmp eax,-1
    81 000000AF 743C                            je gata
    82 000000B1 50                              push eax
    83 000000B2 A0[1E000000]                    mov al, byte [c]
    84 000000B7 8B0D[1A000000]                  mov ecx,[n]
    85                                          repeta_caracter:
    86 000000BD 83F900                          cmp ecx,0
    87 000000C0 7404                            je bitul
    88 000000C2 D0E8                            shr al,1
    89 000000C4 E2F7                            loop repeta_caracter
    90                                      bitul:
    91 000000C6 D0E8                            shr al,1
    92 000000C8 720A                            jc unu
    93 000000CA 832D[22000000]00                sub dword [dif],0
    94 000000D1 58                              pop eax
    95 000000D2 EBBF                            jmp repeta
    96                                      unu:
    97 000000D4 832D[22000000]01                sub dword [dif],1
    98 000000DB 58                              pop eax
    99 000000DC EBB5                            jmp repeta  
   100 000000DE FF35[14000000]              push dword [descriptor]
   101 000000E4 FF15[00000000]              call [fclose]
   102 000000EA 83C404                      add esp,4
   103                                      
   104                                      gata:
   105 000000ED FF35[22000000]              push dword [dif]
   106 000000F3 68[26000000]                push dword format_d
   107 000000F8 FF15[00000000]              call [printf]
   108 000000FE 83C408                      add esp,4*2
   109 00000101 EB0E                        jmp final
   110                                      eroare:
   111 00000103 68[2F000000]                    push dword mesaj_eroare
   112 00000108 FF15[00000000]                  call [printf]
   113 0000010E 83C404                          add esp,4
   114                                     final:
   115                                          
   116                                          
   117 00000111 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   118 00000113 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
