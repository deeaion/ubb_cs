     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00                          a db 0
    15                                   
    16 00000001 256400                      format db "%d",0
    17 00000004 00                          b db 0
    18 00000005 256400                      formatb db "%d",0
    19 00000008 0000                        c dw 0
    20 0000000A 256400                      formatc db "%d",0
    21 0000000D 53756D61206C756920-         message db "Suma lui %d + %d + %d este  %d",0
    21 00000016 2564202B202564202B-
    21 0000001F 202564206573746520-
    21 00000028 20256400           
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 68[00000000]                push dword a
    26 00000005 68[01000000]                push dword format
    27 0000000A FF15[00000000]              call [scanf]
    28 00000010 83C408                      add esp,4*2
    29 00000013 BB00000000                  mov ebx,0
    30 00000018 031D[00000000]              add ebx,[a]
    31 0000001E 68[04000000]                push dword b
    32 00000023 68[05000000]                push dword formatb
    33 00000028 FF15[00000000]              call [scanf]
    34 0000002E 83C408                      add esp,4*2
    35 00000031 031D[04000000]              add ebx,[b]
    36 00000037 68[08000000]                push dword c
    37 0000003C 68[0A000000]                push dword formatc
    38 00000041 FF15[00000000]              call [scanf]
    39 00000047 83C408                      add esp,4*2
    40 0000004A 031D[08000000]              add ebx,[c]
    41 00000050 53                          push ebx
    42 00000051 FF35[08000000]              push dword [c]
    43 00000057 FF35[04000000]              push dword [b]
    44 0000005D FF35[00000000]              push dword [a]
    45 00000063 68[0D000000]                push dword message
    46 00000068 FF15[00000000]              call [printf]
    47 0000006E 83C414                      add ESP,5*4
    48 00000071 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    49 00000073 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
